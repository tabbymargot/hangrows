<?php
/**
 * Load User-Generated JavaScript and CSS
 *
 * @package     FoodiePro
 * @subpackage  Genesis
 * @copyright   Copyright (c) 2014, Shay Bocks
 * @license     GPL-2.0+
 * @since       2.0.0
 */

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

// Continue if the Customizer_Library exists.
if ( class_exists( 'Customizer_Library' ) ) :

add_action( 'wp_enqueue_scripts', 'foodie_pro_load_google_fonts' );
/**
 * Load Google Fonts libaries using dynamically generated user data.
 *
 * @since  2.0.0
 *
 * @uses   customizer_library_get_google_font_uri()
 * @uses   CHILD_THEME_VERSION
 */
function foodie_pro_load_google_fonts() {
	//* Allow users to disable Google Fonts Output.
	if ( apply_filters( 'foodie_pro_disable_google_fonts', false ) ) {
		return;
	}
	// Font options
	$fonts = array();
	foreach ( foodie_pro_get_fonts() as $font => $setting ) {
		$fonts[] = get_theme_mod( $font . '_family', $setting['default_family'] );
	}
	wp_enqueue_style( 'google-fonts', customizer_library_get_google_font_uri( $fonts ), array(), CHILD_THEME_VERSION );
}

add_action( 'wp_enqueue_scripts', 'foodie_pro_add_customizer_styles' );
/**
 * Load all CSS rules generated by the customizer.
 *
 * @since  2.0.0
 *
 * @uses  Customizer_Library_Styles()
 */
function foodie_pro_add_customizer_styles() {
	do_action( 'foodie_pro_inline_styles' );
	wp_add_inline_style( 'foodie-pro-theme', Customizer_Library_Styles()->build() );
}

add_action( 'foodie_pro_inline_styles', 'foodie_pro_build_styles' );
/**
 * Process user options to generate CSS needed to implement the choices.
 *
 * @since  2.0.0.
 *
 * @uses   foodie_pro_get_colors()
 * @uses   foodie_pro_get_fonts()
 * @return void
 */
function foodie_pro_build_styles() {
	//* Build color styles.
	foreach ( foodie_pro_get_colors() as $color => $setting ) {

		$mod = get_theme_mod( $color, $setting['default'] );

		if ( $mod !== $setting['default'] ) {

			$styles = array(
				'selectors' => array(
					$setting['selector'],
				),
				'declarations' => array(
					$setting['rule'] => sanitize_hex_color( $mod ),
				)
			);

			Customizer_Library_Styles()->add( $styles );

		}
	}

	//* Allow users to disable Google Fonts Output.
	if ( apply_filters( 'foodie_pro_disable_google_fonts', false ) ) {
		return;
	}

	//* Build font styles.
	foreach ( foodie_pro_get_fonts() as $font => $setting ) {

		$mod   = get_theme_mod( $font . '_family', $setting['default_family'] );
		$stack = customizer_library_get_font_stack( $mod );
		//* Build styles for the font family.
		$styles = array(
			'selectors' => array(
				$setting['selector'],
			),
			'declarations' => array(
				'font-family' => $stack,
			)
		);

		Customizer_Library_Styles()->add( $styles );

		$mod = get_theme_mod( $font . '_weight', $setting['default_weight'] );
		//* Build styles for the font weight if it isn't disabled.
		if ( $mod !== $setting['default_weight']  && 'disabled' !== $setting['default_weight']  ) {

			$styles = array(
				'selectors' => array(
					$setting['selector'],
				),
				'declarations' => array(
					'font-weight' => $mod,
				)
			);

			Customizer_Library_Styles()->add( $styles );

		}

		$mod = get_theme_mod( $font . '_size', $setting['default_size'] );
		//* Build styles for the font size if it isn't disabled.
		if ( $mod !== $setting['default_size']  && 'disabled' !== $setting['default_size']  ) {

			$styles = array(
				'selectors' => array(
					$setting['selector'],
				),
				'declarations' => array(
					'font-size' => $mod,
				)
			);

			Customizer_Library_Styles()->add( $styles );

		}

		$mod = get_theme_mod( $font . '_style', $setting['default_style'] );
		//* Build styles for the font style if it isn't disabled.
		if ( $mod !== $setting['default_style'] && 'disabled' !== $setting['default_style'] ) {

			$styles = array(
				'selectors' => array(
					$setting['selector'],
				),
				'declarations' => array(
					'font-style' => $mod,
				)
			);

			Customizer_Library_Styles()->add( $styles );

		}
	}
}

endif;
